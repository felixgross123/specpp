<project name="eSTMiner" default="Compile Sources" basedir="." xmlns:ivy="antlib:org.apache.ivy.ant">
	<property name="author" value="Tobias Brockhoff" />
	<property name="organization" value="RWTH Aachen" />
	<property name="description" value="eST-Miner" />
	<!-- See https://svn.win.tue.nl/trac/prom/browser/Packages/ProM-Contexts/Trunk/src/org/processmining/contexts/uitopia/packagemanager/PMPackageView.java for a list of known licenses. -->
	<property name="license" value="GPL" />
	<property name="logo" value="prom_subtitle_hat_300.png" />
	<!-- property name="ivy.lib.dir" value="ivy" / -->
	<!-- property name="ivy.cache.dir" value="/var/lib/hudson/.ivy2/cache/${env.EXECUTOR_NUMBER}" / -->
	<property name="ivy.report.todir" value="report/" />
	<!-- set global properties for this build -->
	<property environment="env" />
	<property name="src.dir" location="src" />
	<property name="test.src.dir" location="test" />
	<property name="build.dir" location="bin" />
	<property name="test.build.dir" location="bin" />
	<property name="doc.dir" location="doc" />
	<property name="lib.dir" location="lib" />
	<property name="dist.dir" location="dist" />
	<property name="version" value="${major_minor}.${env.BUILD_NUMBER}" />
	<property name="project" value="eSTMiner" />
	<property name="pub.version" value="1.1.1" />
	<!-- Set the os to win32, win64, lin32, lin64, mac, or all -->
	<property name="os" value="all" />
	<property name="langversion" value="8" />
	<!-- property name="ivy.lib.dir" value="ivy" / -->
	<!-- property name="ivy.cache.dir" value="/var/lib/hudson/.ivy2/cache/${env.EXECUTOR_NUMBER}" / -->
	<property name="ivy.report.todir" value="report/head/" />

	<!-- Compilation macro
		 This Macro compiles the sources is one ${src.dir}-... folder.
	 The sources are compiled into the ${build.dir} folde.
		 -->

	<path id="build.classpath">
		<fileset dir="${lib.dir}/promint" />
		<fileset dir="${lib.dir}/headless" />
	</path>
	
	<path id="dist.headless.classpath">
		<fileset dir="${lib.dir}/headless" />
	</path>
	
	<pathconvert property="headlessjar.classpath" pathsep=" ">
	    <path refid="dist.headless.classpath"/>
	    <mapper>
	        <chainedmapper>
	            <flattenmapper/>
	            <globmapper from="*.jar" to="lib/*.jar"/>
	        </chainedmapper>
	    </mapper>
	</pathconvert>

	<macrodef name="compile">
		<sequential>
			<pathconvert property="classpathInName" refid="build.classpath" />
			<!-- echo>Classpath is ${classpathInName}</echo -->
			<!-- Compile the java code from ${src.dir}-@{module} into ${build.dir} -->
			<javac srcdir="${src.dir}" classpathref="build.classpath" destdir="${build.dir}" nowarn="false" verbose="no" debug="true" debuglevel="lines,vars,source" deprecation="yes" source="${langversion}" target="${langversion}">
				<!-- Check for unsafe operations -->
				<compilerarg value="-Xlint:unchecked" />
			</javac>
		</sequential>
	</macrodef>

	<macrodef name="test-compile">
		<sequential>
			<javac srcdir="${test.src.dir}" classpathref="build.classpath" destdir="${test.build.dir}" nowarn="false" verbose="no" debug="true" debuglevel="lines,vars,source" deprecation="yes" source="${langversion}" target="${langversion}">
				<!-- Check for unsafe operations -->
				<compilerarg value="-Xlint:unchecked" />
			</javac>
		</sequential>
	</macrodef>

	<!-- Jar macro

		This Macro builds a jar file from compiled sources in the ${dist.dir} folder.
		-->
	<macrodef name="makejarprom">
		<sequential>
			<!-- Create the distribution directory -->
			<!-- Put everything in ${build.dir} into the MyProject-${DSTAMP}.jar file -->
			<jar jarfile="${dist.dir}/${project}-${DSTAMP}.jar">
				<fileset dir="${build.dir}">
					<include name="**" />
				</fileset>
				<fileset dir="${src.dir}">
					<include name="**" />
					<exclude name="org/processmining/emdconceptdrift/headless/*" />
				</fileset>
				<fileset dir="${doc.dir}">
					<include name="**" />
					<exclude name="test**" />
				</fileset>
				<manifest>
					<attribute name="Built-By" value="${user.name}" />
					<attribute name="Specification-Title" value="${project}-@{module}" />
					<attribute name="Specification-Version" value="${version}" />
					<attribute name="Specification-Vendor" value="www.processmining.org" />
					<attribute name="Implementation-Title" value="${project}" />
					<attribute name="Implementation-Version" value="${version} ${TODAY}" />
					<attribute name="Implementation-Vendor" value="www.processmining.org" />
					<attribute name="Sealed" value="false" />
				</manifest>
			</jar>
			<copy file="${dist.dir}/${project}-${DSTAMP}.jar" tofile="${dist.dir}/${project}.jar" overwrite="true" />
		</sequential>
	</macrodef>

	<macrodef name="makejarheadless">
		<sequential>
			<!-- Create the distribution directory -->
			<!-- Put everything in ${build.dir} into the MyProject-${DSTAMP}.jar file -->
			<jar jarfile="${dist.dir}/${project}-${DSTAMP}.jar">
				<fileset dir="${build.dir}">
					<include name="**" />
				</fileset>
				<fileset dir="${src.dir}">
					<include name="**" />
				</fileset>
				<!--fileset dir="${doc.dir}">
					<include name="**" />
					<exclude name="org/processmining/emdconceptdrift/ui/*" />
					<exclude name="org/processmining/emdconceptdrift/config/ParameterBuilderUI*" />
					<exclude name="org/processmining/emdconceptdrift/grounddistances/GroundDistanceFactory*" />
					<exclude name="org/processmining/emdconceptdrift/plugins/*" />
				</fileset -->
				<manifest>
					<!--attribute name="Main-Class" value="org.processmining.emdconceptdrift.headless.Main" /-->
					<attribute name="Main-Class" value="org.processmining.estminer.headless.Main" />
					<attribute name="Class-Path" value="${headlessjar.classpath}"/>
					<attribute name="Built-By" value="${user.name}" />
					<attribute name="Specification-Title" value="${project}-@{module}" />
					<attribute name="Specification-Version" value="${version}" />
					<attribute name="Specification-Vendor" value="www.processmining.org" />
					<attribute name="Implementation-Title" value="${project}" />
					<attribute name="Implementation-Version" value="${version} ${TODAY}" />
					<attribute name="Implementation-Vendor" value="www.processmining.org" />
					<attribute name="Sealed" value="false" />
				</manifest>
			</jar>
			<copy file="${dist.dir}/${project}-${DSTAMP}.jar" tofile="${dist.dir}/${project}.jar" overwrite="true" />
		</sequential>
	</macrodef>

	<target name="clean">
		<echo message="[build] Cleaning binaries and distributions" />
		<delete dir="${build.dir}" />
		<delete dir="${dist.dir}" />
	</target>

	<target name="resolve">
		<sequential>
			<ivy:resolve />
			<ivy:retrieve pattern="${lib.dir}/[conf]/[artifact]-[revision].[ext]" type="jar,bundle" sync="true"/>
			<!--ivy:report todir="${ivy.report.todir}"/-->
		</sequential>
		<!-- Uncomment next line if libraries need to be copied from ivy to lib folder. -->
		<!--ivy:retrieve pattern="lib/[artifact]-[revision].[ext]" conf="lib" type="jar,bundle" sync="true" /-->
		<!-- ivy:retrieve pattern="lib/[artifact]-[revision].[ext]" conf="default" type="jar,bundle" sync="true"/-->
		<!--ivy:dependencytree></ivy:dependencytree-->
	</target>

	<target name="javadoc">
		<echo message="[build] Creating javadoc" />
		<javadoc packagenames="**" classpathref="classpath" useexternalfile="true" defaultexcludes="yes" destdir="${doc.dir}" author="true" version="true" verbose="false" use="true" windowtitle="${project}">
			<fileset dir=".">
				<include name="src/**/*.java" />
				<exclude name="src/test/**/*.java" />
			</fileset>
		</javadoc>
	</target>
	
	<target name="createBinFolders">
		<echo message="Creating binary destination folders" />
		<mkdir dir="${build.dir}" />
		<mkdir dir="${dist.dir}" />
	</target>

	<target name="test-compile" depends="createBinFolders">
		<echo message="[build] Compiling the test sources" />
		<test-compile />
	</target>

	<target name="compile" depends="createBinFolders">
		<echo message="[build] Compiling the sources" />
		<compile />
	</target>
	
	<target name="copyLogConfig" depends="createBinFolders">
		<echo message="Copying log config"></echo>
		<copy file="properties/log4j2.xml" todir="${build.dir}"/>
	</target>

	<target name="makejar">
		<echo message="[build] Creating jar" />
		<tstamp />
		<makejarheadless />
	</target>

	<target name="publish" depends="clean,resolve,compile,makejar" description="Publish this build into repository">
	    <ivy:publish pubrevision="${pub.version}" status="release" resolver="default" >
	        <artifacts pattern="${dist.dir}/[artifact].[ext]"/>
	    </ivy:publish>
	</target>

	<target name="archive">
		<echo message="[build] Packaging the project" />
		<sequential>
			<delete includeEmptyDirs="true" quiet="true">
				<fileset dir="${release}" includes="${project}-*-${os}.zip" />
			</delete>
			<zip destfile="${release}/${project}-${version}-${os}.zip">
				<zipfileset dir="${lib.dir}" prefix="lib">
					<include name="**" />
				</zipfileset>
				<zipfileset dir="${dist.dir}" prefix="">
					<include name="${project}.jar" />
				</zipfileset>
			</zip>
			<copy file="${dist.dir}/${project}.jar" tofile="${release}/${project}.jar" overwrite="true" />
			<delete includeEmptyDirs="true" quiet="true">
				<fileset dir="${release}/lib" includes="**/*" />
			</delete>
			<mkdir dir="${release}/lib" />
			<copy todir="${release}/lib" overwrite="true">
				<fileset dir="${lib.dir}" />
			</copy>
			<exec executable="grep">
				<redirector output="ivypack.xml" />
				<arg value="&lt;dependency .*org=&quot;prom&quot; " />
				<arg value="ivy.xml" />
			</exec>
			<echo file="${release}/packages.xml">
					&lt;packages&gt;
						&lt;package name="${project}" version="${version}" os="${os}" url="${project}/${project}-${version}-${os}.zip" desc="${description}" org="${organization}" license="${license}" author="${author}" auto="false" hasPlugins="true" logo="${logo}"&gt;
				</echo>
			<concat destfile="${release}/packages.xml" append="true">
				<filelist files="ivypack.xml" />
			</concat>
			<echo file="${release}/packages.xml" append="true">
						&lt;/package&gt;
					&lt;/packages&gt;
				</echo>
			<copy file="ivy.xml" tofile="${release}/ivy.xml" overwrite="true" />
			<replace file="${release}/ivy.xml" token="VERSION" value="${version}" />
		</sequential>
	</target>

	<!-- Target to use to build the project on Hudson -->
	<target name="buildHudson" depends="clean,resolve,javadoc,compile,makejar,archive" />

	<!-- Target to use to prepare for a downstream build -->
	<!-- The upstream changes will be copied in following this target -->
	<target name="prepareDownstream" depends="clean,resolve" />

	<!-- Target to use to do the downstram build -->
	<!-- The upstream changes will be copied in preceding this target -->
	<target name="buildDownstream" depends="compile" />

	<!-- Targets for sake of backwards compatibility -->

	<!-- clean all binaries and distributions -->
	<target name="Clean build and dist folders" description="clean up" id="1" depends="clean" />

	<!-- create the project's javadoc from all existing sources. Note that only org.processmining.** is included -->
	<target name="Create Javadoc" description="Generated javadoc" depends="javadoc" />

	<!-- export distribution archive -->
	<target name="Create downloadable archive" depends="Compile Sources,archive" />

	<target name="Compile Sources" depends="resolve,compile,makejar" />

  	<target name="My clean build" depends="clean,compile,test-compile,copyLogConfig" />

  	<target name="Dist Headless" depends="compile,copyLogConfig">
  		<sequential>
			<echo message="[build] Creating headless jar" />
			<tstamp />
			<makejarheadless/>
			<echo message="[build] Copying libraries to dist" />
  			<mkdir dir="${dist.dir}/lib"/>
  			<copy todir="${dist.dir}/lib">
				<fileset dir="${lib.dir}/headless"/>
  			</copy>
		</sequential>
	</target>

</project>


